import React, {useState, useEffect} from 'react';

import PlayBoard from '../../components/views/PlayBoard';
import {CONSTANT} from "../../enums";

import '../styles/app.scss';

const App = () => {

    const [score, setScore] = useState(0);
    const [started, setStarted] = useState(false);
    const [stopped, setStopped] = useState(false);
    const [autoGeneratedIndex, setAutoGeneratedIndex] = useState(-1);
    const [selectedArray, setSelectedArray] = useState([]);

    const styles = {
        mainContainer: 'app__main-container',
        heading: 'app__heading',
        subHeading: 'app__sub-heading',
        scoreCard: 'app__score-card',
        scoreCardText: 'app__score-text',
        scoreInput: 'app__score-input',
        buttons: 'app__buttons',
        instructions: 'app__instructions',
        playButton: 'app__play-button',
        stopButton: 'app__stop-button',
        buttonText: 'app__button-text',
        instructionHeading: 'app__instruction-heading',
        instructionDescription: 'app__instruction-description',
        gameEndedDialog: 'app__game-ended__dialog',
        gameEndedDialogText: 'app__game-ended__dialog-text',
        horizontalBar: 'app__horizontal-bar',
    };

    useEffect(() => {
        if(started) setAutoGeneratedIndex(generateRandomIndex());
    }, [started]);

    const generateRandomIndex = () => {
        let randomIndex = Math.floor(Math.random() * CONSTANT.COUNT);
        while(selectedArray.includes(randomIndex) || randomIndex === autoGeneratedIndex){
            randomIndex = Math.floor(Math.random() * CONSTANT.COUNT);
        }
        return randomIndex;
    };

    const addSelectedIndex = (index) => {
        setSelectedArray([
            ...selectedArray,
            index
        ]);
    };

    const checkIfScored = (index) => {
        if(index === autoGeneratedIndex) {
            setScore(score+1);
            addSelectedIndex(index);
            if(selectedArray.length+1 === CONSTANT.COUNT) {
                onStop();
            }
            else {
                setAutoGeneratedIndex(generateRandomIndex());
            }
        }
        else setScore(score? score-1: score);
    };

    const onPlay = () => {
        setStarted(true);
        setStopped(false);
        setScore(0);
        addSelectedIndex(generateRandomIndex());
    };

    const onStop = () => {
        setSelectedArray([]);
        setStopped(true);
        setStarted(false);
    };

    const gameEnded = () => (
        <section className={styles.gameEndedDialog}>
            <p className={styles.gameEndedDialogText}>Game Ended! <br/>Your final score is: {score}</p>
        </section>
    );


    const checkIfPresent = (index) => {
        return selectedArray.includes(index);
    };

    const getContentView = () => (
        <article>
            <div className={styles.heading}>Hit the circle</div>
            <div className={styles.subHeading}>Test your skill how many circles you can hit?</div>
            <div className={styles.scoreCard}>
                <p className={styles.scoreCardText}>Score </p>
                <input type={"text"} className={styles.scoreInput} value={score} disabled/>
            </div>
        </article>
    );

    const getButtons = () => (
        <article className={styles.buttons}>
            <button disabled={started} className={styles.playButton} style={{ backgroundColor: started? 'rebeccapurple': 'cornflowerblue'}} onClick={onPlay}><p className={styles.buttonText}>Play</p></button>
            <button disabled={stopped} className={styles.stopButton} style={{ backgroundColor: stopped? 'rebeccapurple': 'lightslategrey'}} onClick={onStop}><p className={styles.buttonText}>Stop</p></button>
        </article>
    );

    const getPlayBoard = () => (
            <PlayBoard
                started={started}
                checkIfScored={checkIfScored}
                checkIfPresent={checkIfPresent}
            />
    );

    const getInstructions = () => (
        <article className={styles.instructions}>
            <p className={styles.instructionHeading}>Instructions: </p>
            <p className={styles.instructionDescription}>1. Click on the circles as they are selected randomly by the computer.<br/>
                2. 1 point per hit, minus 1 per miss.
            </p>
        </article>
    );

    return(
        <main className={styles.mainContainer}>
            {getContentView()}
            <hr className={styles.horizontalBar} />
            {getPlayBoard()}
            <hr className={styles.horizontalBar} />
            {getButtons()}
            {getInstructions()}
            {stopped && gameEnded()}
        </main>
    );
};


export default App;